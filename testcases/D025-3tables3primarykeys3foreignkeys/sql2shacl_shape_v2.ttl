@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix uq: <http://sirius−labs.no/shapes/unique#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://example.com/base/Addresses> a rdfs:Class,
        sh:NodeShape ;
    uq:uniqueValuesForClass [ uq:unqForClass <http://example.com/base/Addresses> ;
            uq:unqProp <http://example.com/base/Addresses#ID> ] ;
    sh:property [ sh:class <http://example.com/base/People> ;
            sh:nodeKind sh:IRI ;
            sh:path [ sh:inversePath <http://example.com/base/People,Addresses#addr,ID> ] ],
        [ sh:datatype xsd:string ;
            sh:maxCount 1 ;
            sh:nodeKind sh:Literal ;
            sh:path <http://example.com/base/Addresses#city> ],
        [ sh:datatype xsd:integer ;
            sh:maxCount 1 ;
            sh:minCount 1 ;
            sh:nodeKind sh:Literal ;
            sh:path <http://example.com/base/Addresses#ID> ],
        [ sh:datatype xsd:string ;
            sh:maxCount 1 ;
            sh:nodeKind sh:Literal ;
            sh:path <http://example.com/base/Addresses#state> ] .

<http://example.com/base/Department> a rdfs:Class,
        sh:NodeShape ;
    uq:uniqueValuesForClass [ uq:unqForClass <http://example.com/base/Department> ;
            uq:unqProp <http://example.com/base/Department#ID> ],
        [ uq:unqForClass <http://example.com/base/Department> ;
            uq:unqProp <http://example.com/base/Department#city>,
                <http://example.com/base/Department#name> ] ;
    sh:property [ sh:datatype xsd:integer ;
            sh:maxCount 1 ;
            sh:nodeKind sh:Literal ;
            sh:path <http://example.com/base/Department#manager> ],
        [ sh:class <http://example.com/base/Projects> ;
            sh:nodeKind sh:IRI ;
            sh:path [ sh:inversePath <http://example.com/base/Projects,Department#deptName,deptCity,name,city> ] ],
        [ sh:datatype xsd:string ;
            sh:maxCount 1 ;
            sh:nodeKind sh:Literal ;
            sh:path <http://example.com/base/Department#name> ],
        [ sh:class <http://example.com/base/TaskAssignments> ;
            sh:nodeKind sh:IRI ;
            sh:path [ sh:inversePath <http://example.com/base/TaskAssignments,Department#deptName,deptCity,name,city> ] ],
        [ sh:datatype xsd:string ;
            sh:maxCount 1 ;
            sh:nodeKind sh:Literal ;
            sh:path <http://example.com/base/Department#city> ],
        [ sh:datatype xsd:integer ;
            sh:maxCount 1 ;
            sh:minCount 1 ;
            sh:nodeKind sh:Literal ;
            sh:path <http://example.com/base/Department#ID> ] .

<http://example.com/base/People> a rdfs:Class,
        sh:NodeShape ;
    uq:uniqueValuesForClass [ uq:unqForClass <http://example.com/base/People> ;
            uq:unqProp <http://example.com/base/People#ID> ] ;
    sh:property [ sh:datatype xsd:integer ;
            sh:maxCount 1 ;
            sh:nodeKind sh:Literal ;
            sh:path <http://example.com/base/People#addr> ],
        [ sh:datatype xsd:integer ;
            sh:maxCount 1 ;
            sh:minCount 1 ;
            sh:nodeKind sh:Literal ;
            sh:path <http://example.com/base/People#ID> ],
        [ sh:datatype xsd:string ;
            sh:maxCount 1 ;
            sh:nodeKind sh:Literal ;
            sh:path <http://example.com/base/People#deptCity> ],
        [ sh:datatype xsd:string ;
            sh:maxCount 1 ;
            sh:nodeKind sh:Literal ;
            sh:path <http://example.com/base/People#fname> ],
        [ sh:class <http://example.com/base/Addresses> ;
            sh:maxCount 1 ;
            sh:nodeKind sh:IRI ;
            sh:path <http://example.com/base/People,Addresses#addr,ID> ],
        [ sh:datatype xsd:string ;
            sh:maxCount 1 ;
            sh:nodeKind sh:Literal ;
            sh:path <http://example.com/base/People#deptName> ] .

<http://example.com/base/Projects> a rdfs:Class,
        sh:NodeShape ;
    uq:uniqueValuesForClass [ uq:unqForClass <http://example.com/base/Projects> ;
            uq:unqProp <http://example.com/base/Projects#lead>,
                <http://example.com/base/Projects#name> ],
        [ uq:unqForClass <http://example.com/base/Projects> ;
            uq:unqProp <http://example.com/base/Projects#deptCity>,
                <http://example.com/base/Projects#deptName>,
                <http://example.com/base/Projects#name> ] ;
    sh:property [ sh:class <http://example.com/base/Department> ;
            sh:maxCount 1 ;
            sh:nodeKind sh:IRI ;
            sh:path <http://example.com/base/Projects,Department#deptName,deptCity,name,city> ],
        [ sh:datatype xsd:string ;
            sh:maxCount 1 ;
            sh:nodeKind sh:Literal ;
            sh:path <http://example.com/base/Projects#deptName> ],
        [ sh:datatype xsd:string ;
            sh:maxCount 1 ;
            sh:nodeKind sh:Literal ;
            sh:path <http://example.com/base/Projects#deptCity> ],
        [ sh:class <http://example.com/base/TaskAssignments> ;
            sh:nodeKind sh:IRI ;
            sh:path [ sh:inversePath <http://example.com/base/TaskAssignments,Projects#project,deptName,deptCity,name,deptName,deptCity> ] ],
        [ sh:datatype xsd:integer ;
            sh:maxCount 1 ;
            sh:nodeKind sh:Literal ;
            sh:path <http://example.com/base/Projects#lead> ],
        [ sh:datatype xsd:string ;
            sh:maxCount 1 ;
            sh:nodeKind sh:Literal ;
            sh:path <http://example.com/base/Projects#name> ] .

<http://example.com/base/TaskAssignments> a rdfs:Class,
        sh:NodeShape ;
    uq:uniqueValuesForClass [ uq:unqForClass <http://example.com/base/TaskAssignments> ;
            uq:unqProp <http://example.com/base/TaskAssignments#project>,
                <http://example.com/base/TaskAssignments#worker> ] ;
    sh:property [ sh:class <http://example.com/base/Department> ;
            sh:maxCount 1 ;
            sh:nodeKind sh:IRI ;
            sh:path <http://example.com/base/TaskAssignments,Department#deptName,deptCity,name,city> ],
        [ sh:datatype xsd:string ;
            sh:maxCount 1 ;
            sh:minCount 1 ;
            sh:nodeKind sh:Literal ;
            sh:path <http://example.com/base/TaskAssignments#project> ],
        [ sh:datatype xsd:integer ;
            sh:maxCount 1 ;
            sh:minCount 1 ;
            sh:nodeKind sh:Literal ;
            sh:path <http://example.com/base/TaskAssignments#worker> ],
        [ sh:class <http://example.com/base/Projects> ;
            sh:maxCount 1 ;
            sh:nodeKind sh:IRI ;
            sh:path <http://example.com/base/TaskAssignments,Projects#project,deptName,deptCity,name,deptName,deptCity> ],
        [ sh:datatype xsd:string ;
            sh:maxCount 1 ;
            sh:nodeKind sh:Literal ;
            sh:path <http://example.com/base/TaskAssignments#deptName> ],
        [ sh:datatype xsd:string ;
            sh:maxCount 1 ;
            sh:nodeKind sh:Literal ;
            sh:path <http://example.com/base/TaskAssignments#deptCity> ] .

uq:UniqueValuesConstraintComponent a sh:ConstraintComponent ;
    sh:nodeValidator [ a sh:SPARQLSelectValidator ;
            sh:select """
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            PREFIX uq: <http://sirius−labs.no/shapes/unique#>

            SELECT $this ?other
            WHERE { 
                FILTER NOT EXISTS {
                    GRAPH $shapesGraph {
                        $uniqueValuesForClass uq:unqProp ?prop
                    }
                    $this ?prop ?thisVal .
                    ?other ?prop ?otherVal .
                    FILTER (?thisVal != ?otherVal)
                }
                FILTER (?other != $this)
                GRAPH $shapesGraph {
                    $uniqueValuesForClass uq:unqForClass ?class
                } 
                ?other rdf:type $class .
            }
        """ ] ;
    sh:parameter [ sh:path uq:uniqueValuesForClass ] .

